{"version":3,"sources":["components/Navbar/Navbar.jsx","components/TeamsTable/TeamsTable.jsx","components/Board/Board.jsx","components/Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","TeamsTable","useState","teams","setTeams","favorites","setFavorites","isLoading","setIsLoading","useEffect","getData","getInitialState","getFavoriteStorage","JSON","parse","localStorage","getItem","setItem","stringify","a","axios","get","config","url","headers","api_key","getAPIData","allTeams","data","map","team","key","id","name","yearFounded","founded","crest","crestUrl","src","alt","columns","title","dataIndex","sorter","b","length","sortDirections","render","HeartOutlined","dataSource","scroll","y","showSorterTooltip","loading","onRow","record","onClick","myFavoriteList","includes","splice","indexOf","push","handleFavoriteClick","rowClassName","Board","Home","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAGe,SAASA,IACtB,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,gBAAf,U,kFCoGSC,G,cAlGI,WAAO,IAAD,EACGC,mBAAS,IADZ,mBAChBC,EADgB,KACTC,EADS,OAEWF,qBAFX,mBAEhBG,EAFgB,KAELC,EAFK,OAGWJ,oBAAS,GAHpB,mBAGhBK,EAHgB,KAGLC,EAHK,KAKvBC,qBAAU,WACRC,IACAC,MACC,IAEH,IAAMA,EAAkB,WACtB,IAAMC,EAAqBC,KAAKC,MAAMC,aAAaC,QAAQ,cACtDJ,GACHG,aAAaE,QAAQ,YAAaJ,KAAKK,UAAU,CAAC,KAEpDZ,EAAaM,IAYTF,EAAO,uCAAG,8BAAAS,EAAA,sEACWC,IAAMC,IAAIC,IAAOC,IAAK,CAC7CC,QAAS,CAAE,eAAgBF,IAAOG,WAFtB,OACRC,EADQ,OAIRC,EAAWD,EAAWE,KAAKzB,MAAM0B,KAAI,SAACC,GAC1C,MAAO,CACLC,IAAKD,EAAKE,GACVC,KAAMH,EAAKG,KACXC,YAAaJ,EAAKK,QAClBC,MAAON,EAAKO,SACV,yBAAKC,IAAKR,EAAKO,SAAUE,IAAI,uBAE7B,sCAINnC,EAASuB,GACTnB,GAAa,GAjBC,2CAAH,qDAoBPgC,EAAU,CACd,CACEC,MAAO,QACPC,UAAW,SAEb,CACED,MAAO,OACPC,UAAW,OACXC,OAAQ,SAACxB,EAAGyB,GAAJ,OAAUzB,EAAEc,KAAKY,OAASD,EAAEX,KAAKY,QACzCC,eAAgB,CAAC,UAAW,WAE9B,CACEL,MAAO,eACPC,UAAW,cACXC,OAAQ,SAACxB,EAAGyB,GAAJ,OAAUzB,EAAEe,YAAcU,EAAEV,cAEtC,CACEO,MAAO,cACPM,OAAQ,kBACN,yBAAK/C,UAAU,cACb,gCACE,kBAACgD,EAAA,EAAD,WAOV,OACE,yBAAKhD,UAAU,eACb,kBAAC,IAAD,CACEwC,QAASA,EACTS,WAAY9C,EACZ+C,OAAQ,CAAEC,EAAG,KACbC,mBAAmB,EACnBC,QAAS9C,EACT+C,MAAO,SAACC,GAAD,MAAa,CAClBC,QAAS,YAlEW,SAACD,GAC3B,IAAME,EAAiB5C,KAAKC,MAAMC,aAAaC,QAAQ,cACvDyC,EAAeC,SAASH,EAAOxB,KAC3B0B,EAAeE,OAAOF,EAAeG,QAAQL,EAAOxB,KAAM,GAC1D0B,EAAeI,KAAKN,EAAOxB,KAC/BhB,aAAaE,QAAQ,YAAaJ,KAAKK,UAAUuC,IACjDnD,EAAamD,GA6DLK,CAAoBP,MAGxBQ,aAAc,SAACR,GAAD,OACZlD,GAAaA,EAAUqD,SAASH,EAAOxB,KACnC,WACA,qB,SCnFCiC,G,OAVD,WACZ,OACE,yBAAKhE,UAAU,SACb,kBAAC,IAAD,KACE,kBAAC,EAAD,UCGOiE,EATF,WACX,OACE,yBAAKjE,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCISkE,EARH,WACV,OACE,yBAAKlE,UAAU,OACb,kBAAC,EAAD,QCKcmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASzB,OACP,kBAAC,IAAM0B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.756df9bb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navbar.css\";\n\nexport default function Navbar() {\n  return (\n    <header className=\"navbar\">\n      <div className=\"navbar-title\">Team.</div>\n    </header>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { config } from \"../../utils/config.json\";\nimport { Table } from \"antd\";\nimport { HeartOutlined } from \"@ant-design/icons\";\nimport \"antd/dist/antd.css\";\nimport \"./TeamsTable.css\";\n\nconst TeamsTable = () => {\n  const [teams, setTeams] = useState([]);\n  const [favorites, setFavorites] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getData();\n    getInitialState();\n  }, []);\n\n  const getInitialState = () => {\n    const getFavoriteStorage = JSON.parse(localStorage.getItem(\"favorites\"));\n    if (!getFavoriteStorage) {\n      localStorage.setItem(\"favorites\", JSON.stringify([0]));\n    }\n    setFavorites(getFavoriteStorage);\n  };\n\n  const handleFavoriteClick = (record) => {\n    const myFavoriteList = JSON.parse(localStorage.getItem(\"favorites\"));\n    myFavoriteList.includes(record.key)\n      ? myFavoriteList.splice(myFavoriteList.indexOf(record.key), 1)\n      : myFavoriteList.push(record.key);\n    localStorage.setItem(\"favorites\", JSON.stringify(myFavoriteList));\n    setFavorites(myFavoriteList);\n  };\n\n  const getData = async () => {\n    const getAPIData = await axios.get(config.url, {\n      headers: { \"X-Auth-Token\": config.api_key },\n    });\n    const allTeams = getAPIData.data.teams.map((team) => {\n      return {\n        key: team.id,\n        name: team.name,\n        yearFounded: team.founded,\n        crest: team.crestUrl ? (\n          <img src={team.crestUrl} alt=\"No Crest Available\" />\n        ) : (\n          <div>-</div>\n        ),\n      };\n    });\n    setTeams(allTeams);\n    setIsLoading(false);\n  };\n\n  const columns = [\n    {\n      title: \"Crest\",\n      dataIndex: \"crest\",\n    },\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      sorter: (a, b) => a.name.length - b.name.length,\n      sortDirections: [\"descend\", \"ascend\"],\n    },\n    {\n      title: \"Year Founded\",\n      dataIndex: \"yearFounded\",\n      sorter: (a, b) => a.yearFounded - b.yearFounded,\n    },\n    {\n      title: \"My Favorite\",\n      render: () => (\n        <div className=\"heart-icon\">\n          <button>\n            <HeartOutlined />\n          </button>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"teams-table\">\n      <Table\n        columns={columns}\n        dataSource={teams}\n        scroll={{ y: 400 }}\n        showSorterTooltip={false}\n        loading={isLoading}\n        onRow={(record) => ({\n          onClick: () => {\n            handleFavoriteClick(record);\n          },\n        })}\n        rowClassName={(record) =>\n          favorites && favorites.includes(record.key)\n            ? \"selected\"\n            : \"not-selected\"\n        }\n      />\n    </div>\n  );\n};\n\nexport default TeamsTable;\n","import React from \"react\";\nimport TeamTable from \"../TeamsTable/TeamsTable\";\nimport { Card } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./Board.css\";\n\nconst Board = () => {\n  return (\n    <div className=\"board\">\n      <Card>\n        <TeamTable />\n      </Card>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport Navbar from \"../Navbar/Navbar\";\nimport Board from \"../Board/Board\";\n\nconst Home = () => {\n  return (\n    <div className=\"home-page\">\n      <Navbar />\n      <Board />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home/Home\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}